// Generated by gencpp from file copley/JoySwitch.msg
// DO NOT EDIT!


#ifndef COPLEY_MESSAGE_JOYSWITCH_H
#define COPLEY_MESSAGE_JOYSWITCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace copley
{
template <class ContainerAllocator>
struct JoySwitch_
{
  typedef JoySwitch_<ContainerAllocator> Type;

  JoySwitch_()
    : wing_l(0.0)
    , wing_r(0.0)
    , sting_l(0.0)
    , sting_r(0.0)
    , backhome(0.0)  {
    }
  JoySwitch_(const ContainerAllocator& _alloc)
    : wing_l(0.0)
    , wing_r(0.0)
    , sting_l(0.0)
    , sting_r(0.0)
    , backhome(0.0)  {
  (void)_alloc;
    }



   typedef float _wing_l_type;
  _wing_l_type wing_l;

   typedef float _wing_r_type;
  _wing_r_type wing_r;

   typedef float _sting_l_type;
  _sting_l_type sting_l;

   typedef float _sting_r_type;
  _sting_r_type sting_r;

   typedef float _backhome_type;
  _backhome_type backhome;





  typedef boost::shared_ptr< ::copley::JoySwitch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::copley::JoySwitch_<ContainerAllocator> const> ConstPtr;

}; // struct JoySwitch_

typedef ::copley::JoySwitch_<std::allocator<void> > JoySwitch;

typedef boost::shared_ptr< ::copley::JoySwitch > JoySwitchPtr;
typedef boost::shared_ptr< ::copley::JoySwitch const> JoySwitchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::copley::JoySwitch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::copley::JoySwitch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::copley::JoySwitch_<ContainerAllocator1> & lhs, const ::copley::JoySwitch_<ContainerAllocator2> & rhs)
{
  return lhs.wing_l == rhs.wing_l &&
    lhs.wing_r == rhs.wing_r &&
    lhs.sting_l == rhs.sting_l &&
    lhs.sting_r == rhs.sting_r &&
    lhs.backhome == rhs.backhome;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::copley::JoySwitch_<ContainerAllocator1> & lhs, const ::copley::JoySwitch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace copley

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::copley::JoySwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::copley::JoySwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copley::JoySwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copley::JoySwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copley::JoySwitch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copley::JoySwitch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::copley::JoySwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7e797131241ec68ef8622ca9235a2be";
  }

  static const char* value(const ::copley::JoySwitch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7e797131241ec68ULL;
  static const uint64_t static_value2 = 0xef8622ca9235a2beULL;
};

template<class ContainerAllocator>
struct DataType< ::copley::JoySwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "copley/JoySwitch";
  }

  static const char* value(const ::copley::JoySwitch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::copley::JoySwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 wing_l\n"
"float32 wing_r\n"
"float32 sting_l\n"
"float32 sting_r\n"
"float32 backhome\n"
"\n"
"# 定义PS3手柄上的右侧遥感，包含5个值，分别对应推拉机构的推出、收缩；钩刺机构的推出、收缩；推拉机构与钩刺机构的归位；\n"
"# 用于控制钩刺机构和推拉机构的运动\n"
;
  }

  static const char* value(const ::copley::JoySwitch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::copley::JoySwitch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wing_l);
      stream.next(m.wing_r);
      stream.next(m.sting_l);
      stream.next(m.sting_r);
      stream.next(m.backhome);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoySwitch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::copley::JoySwitch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::copley::JoySwitch_<ContainerAllocator>& v)
  {
    s << indent << "wing_l: ";
    Printer<float>::stream(s, indent + "  ", v.wing_l);
    s << indent << "wing_r: ";
    Printer<float>::stream(s, indent + "  ", v.wing_r);
    s << indent << "sting_l: ";
    Printer<float>::stream(s, indent + "  ", v.sting_l);
    s << indent << "sting_r: ";
    Printer<float>::stream(s, indent + "  ", v.sting_r);
    s << indent << "backhome: ";
    Printer<float>::stream(s, indent + "  ", v.backhome);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COPLEY_MESSAGE_JOYSWITCH_H
