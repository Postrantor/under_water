// Generated by gencpp from file copley/joy2switch_msg.msg
// DO NOT EDIT!


#ifndef COPLEY_MESSAGE_JOY2SWITCH_MSG_H
#define COPLEY_MESSAGE_JOY2SWITCH_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace copley
{
template <class ContainerAllocator>
struct joy2switch_msg_
{
  typedef joy2switch_msg_<ContainerAllocator> Type;

  joy2switch_msg_()
    : adjust_left(0)
    , adjust_right(0)
    , enc_wing(false)
    , enc_sting(false)
    , wing_left(0)
    , wing_right(0)
    , sting_left(0)
    , sting_right(0)  {
    }
  joy2switch_msg_(const ContainerAllocator& _alloc)
    : adjust_left(0)
    , adjust_right(0)
    , enc_wing(false)
    , enc_sting(false)
    , wing_left(0)
    , wing_right(0)
    , sting_left(0)
    , sting_right(0)  {
  (void)_alloc;
    }



   typedef int8_t _adjust_left_type;
  _adjust_left_type adjust_left;

   typedef int8_t _adjust_right_type;
  _adjust_right_type adjust_right;

   typedef uint8_t _enc_wing_type;
  _enc_wing_type enc_wing;

   typedef uint8_t _enc_sting_type;
  _enc_sting_type enc_sting;

   typedef int8_t _wing_left_type;
  _wing_left_type wing_left;

   typedef int8_t _wing_right_type;
  _wing_right_type wing_right;

   typedef int8_t _sting_left_type;
  _sting_left_type sting_left;

   typedef int8_t _sting_right_type;
  _sting_right_type sting_right;





  typedef boost::shared_ptr< ::copley::joy2switch_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::copley::joy2switch_msg_<ContainerAllocator> const> ConstPtr;

}; // struct joy2switch_msg_

typedef ::copley::joy2switch_msg_<std::allocator<void> > joy2switch_msg;

typedef boost::shared_ptr< ::copley::joy2switch_msg > joy2switch_msgPtr;
typedef boost::shared_ptr< ::copley::joy2switch_msg const> joy2switch_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::copley::joy2switch_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::copley::joy2switch_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::copley::joy2switch_msg_<ContainerAllocator1> & lhs, const ::copley::joy2switch_msg_<ContainerAllocator2> & rhs)
{
  return lhs.adjust_left == rhs.adjust_left &&
    lhs.adjust_right == rhs.adjust_right &&
    lhs.enc_wing == rhs.enc_wing &&
    lhs.enc_sting == rhs.enc_sting &&
    lhs.wing_left == rhs.wing_left &&
    lhs.wing_right == rhs.wing_right &&
    lhs.sting_left == rhs.sting_left &&
    lhs.sting_right == rhs.sting_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::copley::joy2switch_msg_<ContainerAllocator1> & lhs, const ::copley::joy2switch_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace copley

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::copley::joy2switch_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::copley::joy2switch_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copley::joy2switch_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copley::joy2switch_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copley::joy2switch_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copley::joy2switch_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::copley::joy2switch_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90b5ad54d03689fd411144777332d6f9";
  }

  static const char* value(const ::copley::joy2switch_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90b5ad54d03689fdULL;
  static const uint64_t static_value2 = 0x411144777332d6f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::copley::joy2switch_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "copley/joy2switch_msg";
  }

  static const char* value(const ::copley::joy2switch_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::copley::joy2switch_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# $ catkin_make -DCATKIN_WHITELIST_PACKAGES=\"copley\"\n"
"# [issue]:\n"
"# 这个可以和cmd的合并在一起\n"
"# 考虑自定义twist\n"
"\n"
"# Joy\n"
"int8 adjust_left\n"
"int8 adjust_right\n"
"bool enc_wing\n"
"bool enc_sting\n"
"\n"
"int8 wing_left\n"
"int8 wing_right\n"
"int8 sting_left\n"
"int8 sting_right\n"
;
  }

  static const char* value(const ::copley::joy2switch_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::copley::joy2switch_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.adjust_left);
      stream.next(m.adjust_right);
      stream.next(m.enc_wing);
      stream.next(m.enc_sting);
      stream.next(m.wing_left);
      stream.next(m.wing_right);
      stream.next(m.sting_left);
      stream.next(m.sting_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joy2switch_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::copley::joy2switch_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::copley::joy2switch_msg_<ContainerAllocator>& v)
  {
    s << indent << "adjust_left: ";
    Printer<int8_t>::stream(s, indent + "  ", v.adjust_left);
    s << indent << "adjust_right: ";
    Printer<int8_t>::stream(s, indent + "  ", v.adjust_right);
    s << indent << "enc_wing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enc_wing);
    s << indent << "enc_sting: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enc_sting);
    s << indent << "wing_left: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wing_left);
    s << indent << "wing_right: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wing_right);
    s << indent << "sting_left: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sting_left);
    s << indent << "sting_right: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sting_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COPLEY_MESSAGE_JOY2SWITCH_MSG_H
