// Generated by gencpp from file copley/motor_msg.msg
// DO NOT EDIT!


#ifndef COPLEY_MESSAGE_MOTOR_MSG_H
#define COPLEY_MESSAGE_MOTOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace copley
{
template <class ContainerAllocator>
struct motor_msg_
{
  typedef motor_msg_<ContainerAllocator> Type;

  motor_msg_()
    : motor_l(0.0)
    , motor_r(0.0)  {
    }
  motor_msg_(const ContainerAllocator& _alloc)
    : motor_l(0.0)
    , motor_r(0.0)  {
  (void)_alloc;
    }



   typedef float _motor_l_type;
  _motor_l_type motor_l;

   typedef float _motor_r_type;
  _motor_r_type motor_r;





  typedef boost::shared_ptr< ::copley::motor_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::copley::motor_msg_<ContainerAllocator> const> ConstPtr;

}; // struct motor_msg_

typedef ::copley::motor_msg_<std::allocator<void> > motor_msg;

typedef boost::shared_ptr< ::copley::motor_msg > motor_msgPtr;
typedef boost::shared_ptr< ::copley::motor_msg const> motor_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::copley::motor_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::copley::motor_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::copley::motor_msg_<ContainerAllocator1> & lhs, const ::copley::motor_msg_<ContainerAllocator2> & rhs)
{
  return lhs.motor_l == rhs.motor_l &&
    lhs.motor_r == rhs.motor_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::copley::motor_msg_<ContainerAllocator1> & lhs, const ::copley::motor_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace copley

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::copley::motor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::copley::motor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copley::motor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copley::motor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copley::motor_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copley::motor_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::copley::motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a89bd8697ea6757cb756a3e8b2bd3f98";
  }

  static const char* value(const ::copley::motor_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa89bd8697ea6757cULL;
  static const uint64_t static_value2 = 0xb756a3e8b2bd3f98ULL;
};

template<class ContainerAllocator>
struct DataType< ::copley::motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "copley/motor_msg";
  }

  static const char* value(const ::copley::motor_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::copley::motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# -*- coding:utf-8 -*-\n"
"# $ catkin_make -DCATKIN_WHITELIST_PACKAGES=\"copley\"\n"
"\n"
"# Control\n"
"float32 motor_l\n"
"float32 motor_r\n"
;
  }

  static const char* value(const ::copley::motor_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::copley::motor_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_l);
      stream.next(m.motor_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::copley::motor_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::copley::motor_msg_<ContainerAllocator>& v)
  {
    s << indent << "motor_l: ";
    Printer<float>::stream(s, indent + "  ", v.motor_l);
    s << indent << "motor_r: ";
    Printer<float>::stream(s, indent + "  ", v.motor_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COPLEY_MESSAGE_MOTOR_MSG_H
