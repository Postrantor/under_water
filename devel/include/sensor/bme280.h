// Generated by gencpp from file sensor/bme280.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_BME280_H
#define SENSOR_MESSAGE_BME280_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor
{
template <class ContainerAllocator>
struct bme280_
{
  typedef bme280_<ContainerAllocator> Type;

  bme280_()
    : chip_id(0)
    , chip_version(0)
    , temperature(0.0)
    , pressure(0.0)
    , humidity(0.0)  {
    }
  bme280_(const ContainerAllocator& _alloc)
    : chip_id(0)
    , chip_version(0)
    , temperature(0.0)
    , pressure(0.0)
    , humidity(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _chip_id_type;
  _chip_id_type chip_id;

   typedef int8_t _chip_version_type;
  _chip_version_type chip_version;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _pressure_type;
  _pressure_type pressure;

   typedef float _humidity_type;
  _humidity_type humidity;





  typedef boost::shared_ptr< ::sensor::bme280_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::bme280_<ContainerAllocator> const> ConstPtr;

}; // struct bme280_

typedef ::sensor::bme280_<std::allocator<void> > bme280;

typedef boost::shared_ptr< ::sensor::bme280 > bme280Ptr;
typedef boost::shared_ptr< ::sensor::bme280 const> bme280ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::bme280_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::bme280_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::bme280_<ContainerAllocator1> & lhs, const ::sensor::bme280_<ContainerAllocator2> & rhs)
{
  return lhs.chip_id == rhs.chip_id &&
    lhs.chip_version == rhs.chip_version &&
    lhs.temperature == rhs.temperature &&
    lhs.pressure == rhs.pressure &&
    lhs.humidity == rhs.humidity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::bme280_<ContainerAllocator1> & lhs, const ::sensor::bme280_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor::bme280_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::bme280_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::bme280_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::bme280_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::bme280_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::bme280_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::bme280_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf334dd156db771a2125cf250be13097";
  }

  static const char* value(const ::sensor::bme280_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf334dd156db771aULL;
  static const uint64_t static_value2 = 0x2125cf250be13097ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::bme280_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/bme280";
  }

  static const char* value(const ::sensor::bme280_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::bme280_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# defain environment sensor bme280 message format\n"
"# ID\n"
"int8 chip_id\n"
"int8 chip_version\n"
"# temperature\n"
"float32 temperature\n"
"# air pressure\n"
"float32 pressure\n"
"# humidity\n"
"float32 humidity\n"
;
  }

  static const char* value(const ::sensor::bme280_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::bme280_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chip_id);
      stream.next(m.chip_version);
      stream.next(m.temperature);
      stream.next(m.pressure);
      stream.next(m.humidity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bme280_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::bme280_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::bme280_<ContainerAllocator>& v)
  {
    s << indent << "chip_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.chip_id);
    s << indent << "chip_version: ";
    Printer<int8_t>::stream(s, indent + "  ", v.chip_version);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "humidity: ";
    Printer<float>::stream(s, indent + "  ", v.humidity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_BME280_H
