// Generated by gencpp from file sensor/coulomb_msg.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_COULOMB_MSG_H
#define SENSOR_MESSAGE_COULOMB_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor/watt_msg.h>
#include <sensor/power_msg.h>

namespace sensor
{
template <class ContainerAllocator>
struct coulomb_msg_
{
  typedef coulomb_msg_<ContainerAllocator> Type;

  coulomb_msg_()
    : header()
    , watt()
    , power()  {
    }
  coulomb_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , watt(_alloc)
    , power(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor::watt_msg_<ContainerAllocator>  _watt_type;
  _watt_type watt;

   typedef  ::sensor::power_msg_<ContainerAllocator>  _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::sensor::coulomb_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::coulomb_msg_<ContainerAllocator> const> ConstPtr;

}; // struct coulomb_msg_

typedef ::sensor::coulomb_msg_<std::allocator<void> > coulomb_msg;

typedef boost::shared_ptr< ::sensor::coulomb_msg > coulomb_msgPtr;
typedef boost::shared_ptr< ::sensor::coulomb_msg const> coulomb_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::coulomb_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::coulomb_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::coulomb_msg_<ContainerAllocator1> & lhs, const ::sensor::coulomb_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.watt == rhs.watt &&
    lhs.power == rhs.power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::coulomb_msg_<ContainerAllocator1> & lhs, const ::sensor::coulomb_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor::coulomb_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::coulomb_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::coulomb_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::coulomb_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::coulomb_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::coulomb_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::coulomb_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5cd7058055ef3a00c048e9d3583364c";
  }

  static const char* value(const ::sensor::coulomb_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5cd7058055ef3a0ULL;
  static const uint64_t static_value2 = 0x0c048e9d3583364cULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::coulomb_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/coulomb_msg";
  }

  static const char* value(const ::sensor::coulomb_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::coulomb_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# define coulomb sensor XLDN_1602 message format\n"
"# Header\n"
"Header header\n"
"# Watt\n"
"sensor/watt_msg watt\n"
"# Power\n"
"sensor/power_msg power\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor/watt_msg\n"
"# 定义一个4维向量用于传输功率的数据\n"
"float32 voltage\n"
"float32 current\n"
"float32 resistance\n"
"float32 watt\n"
"================================================================================\n"
"MSG: sensor/power_msg\n"
"# 定义一个4维向量用于传输电量的数据\n"
"float32 remaining\n"
"int16 consumed\n"
"float32 capacity\n"
"float32 percentage\n"
;
  }

  static const char* value(const ::sensor::coulomb_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::coulomb_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.watt);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct coulomb_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::coulomb_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::coulomb_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "watt: ";
    s << std::endl;
    Printer< ::sensor::watt_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.watt);
    s << indent << "power: ";
    s << std::endl;
    Printer< ::sensor::power_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_COULOMB_MSG_H
