// Generated by gencpp from file sensor/ms5837.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_MS5837_H
#define SENSOR_MESSAGE_MS5837_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor
{
template <class ContainerAllocator>
struct ms5837_
{
  typedef ms5837_<ContainerAllocator> Type;

  ms5837_()
    : psr_atm(0.0)
    , psr_Torr(0.0)
    , psr_psi(0.0)
    , temp_C(0.0)
    , temp_F(0.0)
    , temp_K(0.0)
    , freshDepth(0.0)
    , saltDepth(0.0)
    , altitude(0.0)  {
    }
  ms5837_(const ContainerAllocator& _alloc)
    : psr_atm(0.0)
    , psr_Torr(0.0)
    , psr_psi(0.0)
    , temp_C(0.0)
    , temp_F(0.0)
    , temp_K(0.0)
    , freshDepth(0.0)
    , saltDepth(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef float _psr_atm_type;
  _psr_atm_type psr_atm;

   typedef float _psr_Torr_type;
  _psr_Torr_type psr_Torr;

   typedef float _psr_psi_type;
  _psr_psi_type psr_psi;

   typedef float _temp_C_type;
  _temp_C_type temp_C;

   typedef float _temp_F_type;
  _temp_F_type temp_F;

   typedef float _temp_K_type;
  _temp_K_type temp_K;

   typedef float _freshDepth_type;
  _freshDepth_type freshDepth;

   typedef float _saltDepth_type;
  _saltDepth_type saltDepth;

   typedef float _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::sensor::ms5837_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::ms5837_<ContainerAllocator> const> ConstPtr;

}; // struct ms5837_

typedef ::sensor::ms5837_<std::allocator<void> > ms5837;

typedef boost::shared_ptr< ::sensor::ms5837 > ms5837Ptr;
typedef boost::shared_ptr< ::sensor::ms5837 const> ms5837ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::ms5837_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::ms5837_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::ms5837_<ContainerAllocator1> & lhs, const ::sensor::ms5837_<ContainerAllocator2> & rhs)
{
  return lhs.psr_atm == rhs.psr_atm &&
    lhs.psr_Torr == rhs.psr_Torr &&
    lhs.psr_psi == rhs.psr_psi &&
    lhs.temp_C == rhs.temp_C &&
    lhs.temp_F == rhs.temp_F &&
    lhs.temp_K == rhs.temp_K &&
    lhs.freshDepth == rhs.freshDepth &&
    lhs.saltDepth == rhs.saltDepth &&
    lhs.altitude == rhs.altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::ms5837_<ContainerAllocator1> & lhs, const ::sensor::ms5837_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor::ms5837_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::ms5837_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::ms5837_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::ms5837_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::ms5837_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::ms5837_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::ms5837_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7b0b58529fcdad3a20813b27c552e2d";
  }

  static const char* value(const ::sensor::ms5837_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7b0b58529fcdad3ULL;
  static const uint64_t static_value2 = 0xa20813b27c552e2dULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::ms5837_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/ms5837";
  }

  static const char* value(const ::sensor::ms5837_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::ms5837_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# define deep sensor MS5837_30B message format\n"
"# Pressure\n"
"float32 psr_atm\n"
"float32 psr_Torr\n"
"float32 psr_psi\n"
"# temperature\n"
"float32 temp_C\n"
"float32 temp_F\n"
"float32 temp_K\n"
"# depth\n"
"float32 freshDepth\n"
"float32 saltDepth\n"
"# altitude\n"
"float32 altitude\n"
;
  }

  static const char* value(const ::sensor::ms5837_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::ms5837_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.psr_atm);
      stream.next(m.psr_Torr);
      stream.next(m.psr_psi);
      stream.next(m.temp_C);
      stream.next(m.temp_F);
      stream.next(m.temp_K);
      stream.next(m.freshDepth);
      stream.next(m.saltDepth);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ms5837_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::ms5837_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::ms5837_<ContainerAllocator>& v)
  {
    s << indent << "psr_atm: ";
    Printer<float>::stream(s, indent + "  ", v.psr_atm);
    s << indent << "psr_Torr: ";
    Printer<float>::stream(s, indent + "  ", v.psr_Torr);
    s << indent << "psr_psi: ";
    Printer<float>::stream(s, indent + "  ", v.psr_psi);
    s << indent << "temp_C: ";
    Printer<float>::stream(s, indent + "  ", v.temp_C);
    s << indent << "temp_F: ";
    Printer<float>::stream(s, indent + "  ", v.temp_F);
    s << indent << "temp_K: ";
    Printer<float>::stream(s, indent + "  ", v.temp_K);
    s << indent << "freshDepth: ";
    Printer<float>::stream(s, indent + "  ", v.freshDepth);
    s << indent << "saltDepth: ";
    Printer<float>::stream(s, indent + "  ", v.saltDepth);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_MS5837_H
