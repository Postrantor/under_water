// Generated by gencpp from file sensor/power_msg.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_POWER_MSG_H
#define SENSOR_MESSAGE_POWER_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor
{
template <class ContainerAllocator>
struct power_msg_
{
  typedef power_msg_<ContainerAllocator> Type;

  power_msg_()
    : remaining(0.0)
    , consumed(0)
    , capacity(0.0)
    , percentage(0.0)  {
    }
  power_msg_(const ContainerAllocator& _alloc)
    : remaining(0.0)
    , consumed(0)
    , capacity(0.0)
    , percentage(0.0)  {
  (void)_alloc;
    }



   typedef float _remaining_type;
  _remaining_type remaining;

   typedef int16_t _consumed_type;
  _consumed_type consumed;

   typedef float _capacity_type;
  _capacity_type capacity;

   typedef float _percentage_type;
  _percentage_type percentage;





  typedef boost::shared_ptr< ::sensor::power_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::power_msg_<ContainerAllocator> const> ConstPtr;

}; // struct power_msg_

typedef ::sensor::power_msg_<std::allocator<void> > power_msg;

typedef boost::shared_ptr< ::sensor::power_msg > power_msgPtr;
typedef boost::shared_ptr< ::sensor::power_msg const> power_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::power_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::power_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::power_msg_<ContainerAllocator1> & lhs, const ::sensor::power_msg_<ContainerAllocator2> & rhs)
{
  return lhs.remaining == rhs.remaining &&
    lhs.consumed == rhs.consumed &&
    lhs.capacity == rhs.capacity &&
    lhs.percentage == rhs.percentage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::power_msg_<ContainerAllocator1> & lhs, const ::sensor::power_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor::power_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::power_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::power_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::power_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::power_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::power_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::power_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6985abf14ffd1aad6747673ddb5719f6";
  }

  static const char* value(const ::sensor::power_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6985abf14ffd1aadULL;
  static const uint64_t static_value2 = 0x6747673ddb5719f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::power_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/power_msg";
  }

  static const char* value(const ::sensor::power_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::power_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 定义一个4维向量用于传输电量的数据\n"
"float32 remaining\n"
"int16 consumed\n"
"float32 capacity\n"
"float32 percentage\n"
;
  }

  static const char* value(const ::sensor::power_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::power_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remaining);
      stream.next(m.consumed);
      stream.next(m.capacity);
      stream.next(m.percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct power_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::power_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::power_msg_<ContainerAllocator>& v)
  {
    s << indent << "remaining: ";
    Printer<float>::stream(s, indent + "  ", v.remaining);
    s << indent << "consumed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.consumed);
    s << indent << "capacity: ";
    Printer<float>::stream(s, indent + "  ", v.capacity);
    s << indent << "percentage: ";
    Printer<float>::stream(s, indent + "  ", v.percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_POWER_MSG_H
