# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from copley/joy2switch_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class joy2switch_msg(genpy.Message):
  _md5sum = "90b5ad54d03689fd411144777332d6f9"
  _type = "copley/joy2switch_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# $ catkin_make -DCATKIN_WHITELIST_PACKAGES="copley"
# [issue]:
# 这个可以和cmd的合并在一起
# 考虑自定义twist

# Joy
int8 adjust_left
int8 adjust_right
bool enc_wing
bool enc_sting

int8 wing_left
int8 wing_right
int8 sting_left
int8 sting_right"""
  __slots__ = ['adjust_left','adjust_right','enc_wing','enc_sting','wing_left','wing_right','sting_left','sting_right']
  _slot_types = ['int8','int8','bool','bool','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       adjust_left,adjust_right,enc_wing,enc_sting,wing_left,wing_right,sting_left,sting_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(joy2switch_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.adjust_left is None:
        self.adjust_left = 0
      if self.adjust_right is None:
        self.adjust_right = 0
      if self.enc_wing is None:
        self.enc_wing = False
      if self.enc_sting is None:
        self.enc_sting = False
      if self.wing_left is None:
        self.wing_left = 0
      if self.wing_right is None:
        self.wing_right = 0
      if self.sting_left is None:
        self.sting_left = 0
      if self.sting_right is None:
        self.sting_right = 0
    else:
      self.adjust_left = 0
      self.adjust_right = 0
      self.enc_wing = False
      self.enc_sting = False
      self.wing_left = 0
      self.wing_right = 0
      self.sting_left = 0
      self.sting_right = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2b2B4b().pack(_x.adjust_left, _x.adjust_right, _x.enc_wing, _x.enc_sting, _x.wing_left, _x.wing_right, _x.sting_left, _x.sting_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.adjust_left, _x.adjust_right, _x.enc_wing, _x.enc_sting, _x.wing_left, _x.wing_right, _x.sting_left, _x.sting_right,) = _get_struct_2b2B4b().unpack(str[start:end])
      self.enc_wing = bool(self.enc_wing)
      self.enc_sting = bool(self.enc_sting)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2b2B4b().pack(_x.adjust_left, _x.adjust_right, _x.enc_wing, _x.enc_sting, _x.wing_left, _x.wing_right, _x.sting_left, _x.sting_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.adjust_left, _x.adjust_right, _x.enc_wing, _x.enc_sting, _x.wing_left, _x.wing_right, _x.sting_left, _x.sting_right,) = _get_struct_2b2B4b().unpack(str[start:end])
      self.enc_wing = bool(self.enc_wing)
      self.enc_sting = bool(self.enc_sting)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b2B4b = None
def _get_struct_2b2B4b():
    global _struct_2b2B4b
    if _struct_2b2B4b is None:
        _struct_2b2B4b = struct.Struct("<2b2B4b")
    return _struct_2b2B4b
