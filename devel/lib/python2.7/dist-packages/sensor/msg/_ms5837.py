# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor/ms5837.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ms5837(genpy.Message):
  _md5sum = "b7b0b58529fcdad3a20813b27c552e2d"
  _type = "sensor/ms5837"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# define deep sensor MS5837_30B message format
# Pressure
float32 psr_atm
float32 psr_Torr
float32 psr_psi
# temperature
float32 temp_C
float32 temp_F
float32 temp_K
# depth
float32 freshDepth
float32 saltDepth
# altitude
float32 altitude
"""
  __slots__ = ['psr_atm','psr_Torr','psr_psi','temp_C','temp_F','temp_K','freshDepth','saltDepth','altitude']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       psr_atm,psr_Torr,psr_psi,temp_C,temp_F,temp_K,freshDepth,saltDepth,altitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ms5837, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.psr_atm is None:
        self.psr_atm = 0.
      if self.psr_Torr is None:
        self.psr_Torr = 0.
      if self.psr_psi is None:
        self.psr_psi = 0.
      if self.temp_C is None:
        self.temp_C = 0.
      if self.temp_F is None:
        self.temp_F = 0.
      if self.temp_K is None:
        self.temp_K = 0.
      if self.freshDepth is None:
        self.freshDepth = 0.
      if self.saltDepth is None:
        self.saltDepth = 0.
      if self.altitude is None:
        self.altitude = 0.
    else:
      self.psr_atm = 0.
      self.psr_Torr = 0.
      self.psr_psi = 0.
      self.temp_C = 0.
      self.temp_F = 0.
      self.temp_K = 0.
      self.freshDepth = 0.
      self.saltDepth = 0.
      self.altitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.psr_atm, _x.psr_Torr, _x.psr_psi, _x.temp_C, _x.temp_F, _x.temp_K, _x.freshDepth, _x.saltDepth, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.psr_atm, _x.psr_Torr, _x.psr_psi, _x.temp_C, _x.temp_F, _x.temp_K, _x.freshDepth, _x.saltDepth, _x.altitude,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.psr_atm, _x.psr_Torr, _x.psr_psi, _x.temp_C, _x.temp_F, _x.temp_K, _x.freshDepth, _x.saltDepth, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.psr_atm, _x.psr_Torr, _x.psr_psi, _x.temp_C, _x.temp_F, _x.temp_K, _x.freshDepth, _x.saltDepth, _x.altitude,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
